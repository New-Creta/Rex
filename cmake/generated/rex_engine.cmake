

# This file was automatically generated by "create_project.py"
# Command: generate_project(type project_name solution_folder project_folder pch_header_name = project_folder pch_src_name = project_folder)
# Example: generate_project(static CoreLibs 1_common core_libs)


# include path: ${CMAKE_SOURCE_DIR}/source/include/1_engine/rex_engine
# src path: ${CMAKE_SOURCE_DIR}/source/src/1_engine/rex_engine


# Project Name Project
# -------------------------
file(GLOB_RECURSE rex_engine_LIBS_INC    ${CMAKE_SOURCE_DIR}/source/include/1_engine/rex_engine/*.h)
file(GLOB_RECURSE rex_engine_LIBS_SRC    ${CMAKE_SOURCE_DIR}/source/src/1_engine/rex_engine/*.cpp)


# Create the project filters
message(STATUS "sourcedir: ${CMAKE_SOURCE_DIR}")
GROUPSOURCES(${CMAKE_SOURCE_DIR}/source/include/1_engine/rex_engine include)
GROUPSOURCES(${CMAKE_SOURCE_DIR}/source/src/1_engine/rex_engine src)


# Create the project
add_library(rex_engine STATIC ${rex_engine_LIBS_INC} ${rex_engine_LIBS_SRC})


# Set the include directories
target_include_directories(rex_engine PUBLIC ${CMAKE_SOURCE_DIR}/source/include/1_engine/rex_engine)
target_include_directories(rex_engine PUBLIC ${CMAKE_SOURCE_DIR}/source/include/1_engine/rex_std)
target_include_directories(rex_engine PUBLIC ${CMAKE_SOURCE_DIR}/source/include/1_engine/rex_events)
target_include_directories(rex_engine PUBLIC ${REX_STL_DIR}/include/1_Core)

target_link_libraries(rex_engine PUBLIC RexStd)
target_link_libraries(rex_engine PUBLIC rex_std)
target_link_libraries(rex_engine PUBLIC rex_events)

# Set project properties
set_target_properties(rex_engine PROPERTIES FOLDER                                         		1_engine)   					# solution folder
set_target_properties(rex_engine PROPERTIES DEFINE_SYMBOL                                  		"" )                     		# defines
IF(MSVC)
	set_target_properties(rex_engine PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY                	${OUTPUT_BINDIR})        		# working directory
	set_target_properties(rex_engine PROPERTIES ARCHIVE_OUTPUT_DIRECTORY 					  	${OUTPUT_BINDIR})				# output directory
    set_target_properties(rex_engine PROPERTIES LIBRARY_OUTPUT_DIRECTORY 					  	${OUTPUT_BINDIR})				# output directory
    set_target_properties(rex_engine PROPERTIES RUNTIME_OUTPUT_DIRECTORY 					  	${OUTPUT_BINDIR})				# output directory


	set_target_properties(rex_engine PROPERTIES VS_GLOBAL_EnableUnitySupport                 	True)                    		# unit builds on visual studio
	set_target_properties(rex_engine PROPERTIES VS_GLOBAL_IncludeInUnityFile                 	True)
	set_target_properties(rex_engine PROPERTIES VS_GLOBAL_OrderInUnityFile                   	100)
	set_target_properties(rex_engine PROPERTIES VS_GLOBAL_CombineFilesOnlyFromTheSameFolder  	false)
	set_target_properties(rex_engine PROPERTIES VS_GLOBAL_MinFilesInUnityFile                	2)
	set_target_properties(rex_engine PROPERTIES VS_GLOBAL_MaxFilesInUnityFile                	0)
	set_target_properties(rex_engine PROPERTIES VS_GLOBAL_MinUnityFiles                      	1)
	set_target_properties(rex_engine PROPERTIES VS_GLOBAL_UnityFilesDirectory                	.)
ENDIF()

# Compiler options
IF(MSVC)
	target_compile_options(rex_engine PRIVATE /W4 /WX /MP)
endif()


# Set precompiled header
add_precompiled_header(rex_engine "rex_engine_pch.h" "rex_engine_pch.cpp")